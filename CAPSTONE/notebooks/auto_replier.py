# -*- coding: utf-8 -*-
"""Auto Replier

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NPnlgOG-gObxtCyLz_yMrX7TMrijPluD
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Set project path
project_path = '/content/drive/MyDrive/CAPSTONE'

import sys
sys.path.append(f'{project_path}/scripts')
from pathlib import Path

# Point to the correct folder in Drive
course_tools_path = Path('/content/drive/MyDrive/CAPSTONE')
sys.path.append(str(course_tools_path))

# Import and run the installer
from install_introdl import ensure_introdl_installed
ensure_introdl_installed(force_update=False, local_path_pkg=course_tools_path / 'introdl')

!pip install bitsandbytes accelerate
!pip install torchinfo
!pip install evaluate
!pip install rouge_score
!pip install bert_score
!pip install rapidfuzz

from IPython.display import display, HTML, clear_output, Markdown
import gc # for memory management
import pandas as pd
from openai import OpenAI
import openai
import os
import re
import torch
from transformers import AutoModelForCausalLM, AutoTokenizer

from introdl.nlp import llm_configure, llm_generate, llm_list_models

from introdl.utils import config_paths_keys, wrap_print_text
print = wrap_print_text(print, width = 100)

from introdl.utils import config_paths_keys

paths = config_paths_keys() # this loads the keys and path variables.

MODELS_PATH = paths['MODELS_PATH']
DATA_PATH = paths['DATA_PATH']

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/CAPSTONE/data/Hyatt_LTR_Sentiment.csv')
df = df[['Additional.Feedback.on.Overall.Stay', 'Sentiment']].dropna()

LLM_MODEL = 'unsloth/mistral-7b-instruct-v0.3-bnb-4bit'
llm_config = llm_configure(LLM_MODEL)

sentiment_tone_map = {
    "Very Positive": "enthusiastic and grateful",
    "Positive but Critical": "appreciative but attentive to concerns",
    "Mixed or Neutral": "balanced and professional",
    "Slightly Negative": "understanding and mildly apologetic",
    "Negative": "apologetic and solution-focused",
    "Very Negative": "deeply apologetic and committed to resolution"
}

import pandas as pd
import os

# Load your dataset
df = pd.read_csv("/content/drive/MyDrive/CAPSTONE/data/Hyatt_LTR_Sentiment.csv")
df = df[["Additional.Feedback.on.Overall.Stay", "Sentiment"]].dropna().reset_index(drop=True)

# Output path
output_path = "/content/drive/MyDrive/CAPSTONE/data/auto_replies_10.csv"
os.makedirs(os.path.dirname(output_path), exist_ok=True)

# Resume from checkpoint if exists
if os.path.exists(output_path):
    completed_df = pd.read_csv(output_path)
    start_idx = len(completed_df)
    print(f"üîÅ Resuming from index {start_idx}")
else:
    completed_df = pd.DataFrame(columns=["Feedback", "Sentiment", "Tone", "Reply"])
    start_idx = 0

# Batch generation
batch_size = 5
for i in range(start_idx, len(df), batch_size):
    batch = df.iloc[i:i+batch_size]
    feedbacks = batch["Additional.Feedback.on.Overall.Stay"].tolist()
    sentiments = batch["Sentiment"].tolist()
    tones = [sentiment_tone_map.get(s, "professional and courteous") for s in sentiments]

    # Generate prompts
    prompts = [
        f"Guest Feedback: {feedback}\n\nReply:"
        for feedback in feedbacks
    ]
    system_prompt = "You are a hotel guest relations assistant. Respond to guest feedback in a tone appropriate to the sentiment."

    # Generate replies
    try:
        replies = llm_generate(llm_config, prompts, system_prompt=system_prompt)
    except Exception as e:
        print(f"‚ö†Ô∏è Error at batch {i}: {e}")
        break

    # Append to DataFrame
    batch_results = pd.DataFrame({
        "Feedback": feedbacks,
        "Sentiment": sentiments,
        "Tone": tones,
        "Reply": [r.strip() for r in replies]
    })
    completed_df = pd.concat([completed_df, batch_results], ignore_index=True)

    # Save progress every batch
    completed_df.to_csv(output_path, index=False)
    print(f"‚úÖ Saved batch {i}‚Äì{i+batch_size} to {output_path}")

sentiment_tone_map = {
    "Very Positive": "enthusiastic and grateful",
    "Positive but Critical": "appreciative but attentive to concerns",
    "Neutral": "balanced and professional",
    "Negative": "apologetic and solution-focused",
    "Very Negative": "deeply apologetic and committed to resolution"
}

import pandas as pd
import os

# Load your dataset
df = pd.read_csv("/content/drive/MyDrive/CAPSTONE/data/First100.csv")
df = df[["Survey_feedback", "Sentiment"]].dropna().reset_index(drop=True)

# Output path
output_path = "/content/drive/MyDrive/CAPSTONE/data/auto_replies_FINAL.csv"
os.makedirs(os.path.dirname(output_path), exist_ok=True)

# Resume from checkpoint if exists
if os.path.exists(output_path):
    completed_df = pd.read_csv(output_path)
    start_idx = len(completed_df)
    print(f"üîÅ Resuming from index {start_idx}")
else:
    completed_df = pd.DataFrame(columns=["Feedback", "Sentiment", "Tone", "Reply"])
    start_idx = 0

# Batch generation
batch_size = 1
for i in range(start_idx, len(df), batch_size):
    batch = df.iloc[i:i+batch_size]
    feedbacks = batch["Survey_feedback"].tolist()
    sentiments = batch["Sentiment"].tolist()
    tones = [sentiment_tone_map.get(s, "professional and courteous") for s in sentiments]

    # Generate prompts
    prompts = [
        f"Guest Feedback: {feedback}\n\nReply:"
        for feedback in feedbacks
    ]
    system_prompt = """
    You are a hotel guest relations assistant writing replies to guest feedback.

    Your responses should be:
    ‚Ä¢ Empathetic, professional, and conversational
    ‚Ä¢ Free of greetings like 'Dear Guest' and generic phrases like 'thank you for your feedback'
    ‚Ä¢ Directly focused on the guest's comments
    ‚Ä¢ Written in clear, concise language with no long paragraphs
    ‚Ä¢ Limited to a short reply that fits within the space of a mobile-friendly response ‚Äî prioritize brevity without losing sincerity

    Keep the tone emotionally intelligent and tailored to the sentiment. Do not exceed the token or character limit. If feedback is lengthy, respond only to the key issues or praise mentioned.
    """


    # Generate replies
    try:
        replies = llm_generate(llm_config, prompts, system_prompt=system_prompt)
    except Exception as e:
        print(f"‚ö†Ô∏è Error at batch {i}: {e}")
        break

    # Append to DataFrame
    batch_results = pd.DataFrame({
        "Feedback": feedbacks,
        "Sentiment": sentiments,
        "Tone": tones,
        "Reply": [r.strip() for r in replies]
    })
    completed_df = pd.concat([completed_df, batch_results], ignore_index=True)

    # Save progress every batch
    completed_df.to_csv(output_path, index=False)
    print(f"‚úÖ Saved batch {i}‚Äì{i+batch_size} to {output_path}")

!pip install reportlab

import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/CAPSTONE/data/auto_replies_FINAL.csv")

from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import pandas as pd

# Load your final data
df = pd.read_csv("/content/drive/MyDrive/CAPSTONE/data/auto_replies_FINAL.csv")

# Prepare data with wrapped text
styles = getSampleStyleSheet()
table_data = [df.columns.tolist()]
for _, row in df.iterrows():
    formatted_row = [
        Paragraph(str(row["Feedback"]), styles["Normal"]),
        Paragraph(str(row["Sentiment"]), styles["Normal"]),
        Paragraph(str(row["Tone"]), styles["Normal"]),
        Paragraph(str(row["Reply"]), styles["Normal"])
    ]
    table_data.append(formatted_row)

# Create the PDF
pdf_path = "/content/drive/MyDrive/CAPSTONE/data/auto_replies_FINAL.pdf"
pdf = SimpleDocTemplate(pdf_path)

table = Table(table_data, repeatRows=1, colWidths=[140, 75, 110, 180])
table.setStyle(TableStyle([
    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
    ('FONTSIZE', (0, 0), (-1, -1), 8),
    ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
    ('GRID', (0, 0), (-1, -1), 0.25, colors.black)
]))

# Build the PDF
pdf.build([table])
print("‚úÖ PDF saved successfully to:", pdf_path)